#version 300 es
precision highp float;

uniform vec3 u_Eye, u_Ref, u_Up;
uniform vec2 u_Dimensions;
uniform sampler2D u_Image1; // Color
uniform sampler2D u_Image2; // depth
uniform sampler2D u_Image3; // control
uniform float u_ViewMode;



in vec2 fs_Pos;
out vec4 out_Col;

const float array[441] = float[441](
  0.001932,	0.001979,	0.002021,	0.002060, 0.002093,	0.002122,	0.002146,	0.002165,	0.002179,	0.002187,	0.002190,	0.002187,	0.002179,	0.002165,	0.002146,	0.002122,	0.002093,	0.002060,	0.002021,	0.001979,	0.001932,
  0.001979,	0.002026,	0.002070, 0.002109,	0.002144,	0.002173,	0.002198,	0.002217,	0.002231,	0.002239,	0.002242,	0.002239,	0.002231,	0.002217,	0.002198,	0.002173,	0.002144,	0.002109,	0.002070,	0.002026,	0.001979,
  0.002021,	0.002070, 0.002114,	0.002154,	0.002190, 0.002220, 0.002245,	0.002265,	0.002279,	0.002288,	0.002290,	0.002288,	0.002279,	0.002265,	0.002245,	0.002220,	0.002190,	0.002154,	0.002114,	0.002070,	0.002021,
  0.002060, 0.002109,	0.002154,	0.002195,	0.002231,	0.002262,	0.002288,	0.002308,	0.002322,	0.002331,	0.002334,	0.002331,	0.002322,	0.002308,	0.002288,	0.002262,	0.002231,	0.002195,	0.002154,	0.002109,	0.002060,
  0.002093,	0.002144,	0.002190, 0.002231,	0.002268,	0.002299,	0.002325,	0.002345,	0.002360,	0.002369,	0.002372,	0.002369,	0.002360,	0.002345,	0.002325,	0.002299,	0.002268,	0.002231,	0.002190,	0.002144,	0.002093,
  0.002122,	0.002173,	0.002220, 0.002262,	0.002299,	0.002331,	0.002357,	0.002378,	0.002393,	0.002402,	0.002405,	0.002402,	0.002393,	0.002378,	0.002357,	0.002331,	0.002299,	0.002262,	0.002220,	0.002173,	0.002122,
  0.002146,	0.002198,	0.002245,	0.002288,	0.002325,	0.002357,	0.002384,	0.002405,	0.002420,	0.002429,	0.002432,	0.002429,	0.002420,	0.002405,	0.002384,	0.002357,	0.002325,	0.002288,	0.002245,	0.002198,	0.002146,
  0.002165,	0.002217,	0.002265,	0.002308,	0.002345,	0.002378,	0.002405,	0.002426,	0.002441,	0.002450,	0.002453,	0.002450,	0.002441,	0.002426,	0.002405,	0.002378,	0.002345,	0.002308,	0.002265,	0.002217,	0.002165,
  0.002179,	0.002231,	0.002279,	0.002322,	0.002360, 0.002393,	0.002420, 0.002441,	0.002456,	0.002466,	0.002469,	0.002466,	0.002456,	0.002441,	0.002420,	0.002393,	0.002360,	0.002322,	0.002279,	0.002231,	0.002179,
  0.002187,	0.002239,	0.002288,	0.002331,	0.002369,	0.002402,	0.002429,	0.002450,	0.002466,	0.002475,	0.002478,	0.002475,	0.002466,	0.002450,	0.002429,	0.002402,	0.002369,	0.002331,	0.002288,	0.002239,	0.002187,
  0.002190, 0.002242,	0.002290, 0.002334,	0.002372,	0.002405,	0.002432,	0.002453,	0.002469,	0.002478,	0.002481,	0.002478,	0.002469,	0.002453,	0.002432,	0.002405,	0.002372,	0.002334,	0.002290,	0.002242,	0.002190,
  0.002187,	0.002239,	0.002288,	0.002331,	0.002369,	0.002402,	0.002429,	0.002450,	0.002466,	0.002475,	0.002478,	0.002475,	0.002466,	0.002450,	0.002429,	0.002402,	0.002369,	0.002331,	0.002288,	0.002239,	0.002187,
  0.002179,	0.002231,	0.002279,	0.002322,	0.002360, 0.002393,	0.002420, 0.002441,	0.002456,	0.002466,	0.002469,	0.002466,	0.002456,	0.002441,	0.002420,	0.002393,	0.002360,	0.002322,	0.002279,	0.002231,	0.002179,
  0.002165,	0.002217,	0.002265,	0.002308,	0.002345,	0.002378,	0.002405,	0.002426,	0.002441,	0.002450,	0.002453,	0.002450,	0.002441,	0.002426,	0.002405,	0.002378,	0.002345,	0.002308,	0.002265,	0.002217,	0.002165,
  0.002146,	0.002198,	0.002245,	0.002288,	0.002325,	0.002357,	0.002384,	0.002405,	0.002420,	0.002429,	0.002432,	0.002429,	0.002420,	0.002405,	0.002384,	0.002357,	0.002325,	0.002288,	0.002245,	0.002198,	0.002146,
  0.002122,	0.002173,	0.002220, 0.002262,	0.002299,	0.002331,	0.002357,	0.002378,	0.002393,	0.002402,	0.002405,	0.002402,	0.002393,	0.002378,	0.002357,	0.002331,	0.002299,	0.002262,	0.002220,	0.002173,	0.002122,
  0.002093,	0.002144,	0.002190, 0.002231,	0.002268,	0.002299,	0.002325,	0.002345,	0.002360,	0.002369,	0.002372,	0.002369,	0.002360,	0.002345,	0.002325,	0.002299,	0.002268,	0.002231,	0.002190,	0.002144,	0.002093,
  0.002060, 0.002109,	0.002154,	0.002195,	0.002231,	0.002262,	0.002288,	0.002308,	0.002322,	0.002331,	0.002334,	0.002331,	0.002322,	0.002308,	0.002288,	0.002262,	0.002231,	0.002195,	0.002154,	0.002109,	0.002060,
  0.002021,	0.002070, 0.002114,	0.002154,	0.002190, 0.002220, 0.002245,	0.002265,	0.002279,	0.002288,	0.002290,	0.002288,	0.002279,	0.002265,	0.002245,	0.002220,	0.002190,	0.002154,	0.002114,	0.002070,	0.002021,
  0.001979,	0.002026,	0.002070, 0.002109,	0.002144,	0.002173,	0.002198,	0.002217,	0.002231,	0.002239,	0.002242,	0.002239,	0.002231,	0.002217,	0.002198,	0.002173,	0.002144,	0.002109,	0.002070,	0.002026,	0.001979,
  0.001932,	0.001979,	0.002021,	0.002060, 0.002093,	0.002122,	0.002146,	0.002165,	0.002179,	0.002187,	0.002190,	0.002187,	0.002179,	0.002165,	0.002146,	0.002122,	0.002093,	0.002060,	0.002021,	0.001979,	0.001932
);

void main() {

  float x = 0.5 * (fs_Pos.x + 1.0);
  float y = 0.5 * (fs_Pos.y + 1.0);
  float pixDimx = 1.0 / float(u_Dimensions.x);
  float pixDimy = 1.0 / float(u_Dimensions.y);

  vec4 colorSample = texture(u_Image1, vec2(x,y));
  vec4 depthSample = texture(u_Image2, vec2(x,y));
  vec4 controlSample = texture(u_Image3, vec2(x,y));

  if (u_ViewMode > 4.5) {
    out_Col = depthSample;
  } else {

    vec4 accumColor = vec4(0.0);
    float colorLost = 0.0;

    float totalBlur = 0.0;
    int count = 0;
    for (int i = -10; i <= 10; i++) {
      for (int j = -10; j <= 10; j++) {
          vec4 curr_color = texture(u_Image1, vec2(x + float(i) * (pixDimx), y + float(j) * (pixDimy)));
          vec4 currDepth = texture(u_Image2, vec2(x + float(i) * (pixDimx), y + float(j) * (pixDimy)));
          vec4 currControl = texture(u_Image3, vec2(x + float(i) * (pixDimx), y + float(j) * (pixDimy)));
          float scale = array[count];        

          if (currDepth.r > depthSample.r && currControl.r < 0.1 && currControl.a != controlSample.a) {
            // If current pixel is farther than kernel, current object is not blurred, and current object is different from current kernel object
            colorLost += scale;
            scale = 0.0;
          } 
          if (currDepth.r < depthSample.r && controlSample.r < 0.1 && currControl.a != controlSample.a) {
            // If current pixel is closer than kernel, current object is not blurred, and current object is different from current kernel object
            colorLost += scale;
            scale = 0.0;
          } 
          // totalBlur += currControl.r;
          if (currControl.r > totalBlur) {
            totalBlur = currControl.r;
          }

          accumColor = accumColor + (scale * curr_color);
          count++;

      }
    }
    if (colorLost > 0.0) {
      accumColor += colorSample * colorLost;
    }

    float avgBlur = totalBlur / 441.0;
    float blurrAmount = clamp(pow(mix(0.0, 1.0, totalBlur * 1.0), 1.0), 0.0, 1.0);

    vec4 finalColor = mix(colorSample, accumColor, totalBlur);

    out_Col = vec4(finalColor.rgb, 1.0);
  }
}
